{"version":3,"file":"index.umd.min.js","sources":["../src/contracts/SignatureVerifyContract.ts"],"sourcesContent":["/**\n* This file was automatically generated by cosmwasm-typescript-gen@0.3.9.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run the cosmwasm-typescript-gen generate command to regenerate this file.\n*/\n\nimport { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\nimport { Coin, StdFee } from \"@cosmjs/amino\";\nexport type ExecuteMsg = {\n  increment: {\n    [k: string]: unknown;\n  };\n} | {\n  reset: {\n    count: number;\n    [k: string]: unknown;\n  };\n} | {\n  lazy_mint: {\n    message_hash: number[];\n    public_key: number[];\n    signature: number[];\n    [k: string]: unknown;\n  };\n};\nexport interface GetCountResponse {\n  count: number;\n  [k: string]: unknown;\n}\nexport interface InstantiateMsg {\n  count: number;\n  [k: string]: unknown;\n}\nexport type QueryMsg = {\n  get_count: {\n    [k: string]: unknown;\n  };\n};\nexport type Addr = string;\nexport interface State {\n  count: number;\n  owner: Addr;\n  [k: string]: unknown;\n}\nexport interface SignatureVerifyReadOnlyInterface {\n  contractAddress: string;\n  getCount: () => Promise<GetCountResponse>;\n}\nexport class SignatureVerifyQueryClient implements SignatureVerifyReadOnlyInterface {\n  client: CosmWasmClient;\n  contractAddress: string;\n\n  constructor(client: CosmWasmClient, contractAddress: string) {\n    this.client = client;\n    this.contractAddress = contractAddress;\n    this.getCount = this.getCount.bind(this);\n  }\n\n  getCount = async (): Promise<GetCountResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_count: {}\n    });\n  };\n}\nexport interface SignatureVerifyInterface extends SignatureVerifyReadOnlyInterface {\n  contractAddress: string;\n  sender: string;\n  increment: (fee?: number | StdFee | \"auto\", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;\n  reset: ({\n    count\n  }: {\n    count: number;\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;\n  lazyMint: ({\n    messageHash,\n    publicKey,\n    signature\n  }: {\n    messageHash: number[];\n    publicKey: number[];\n    signature: number[];\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;\n}\nexport class SignatureVerifyClient extends SignatureVerifyQueryClient implements SignatureVerifyInterface {\n  client: SigningCosmWasmClient;\n  sender: string;\n  contractAddress: string;\n\n  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {\n    super(client, contractAddress);\n    this.client = client;\n    this.sender = sender;\n    this.contractAddress = contractAddress;\n    this.increment = this.increment.bind(this);\n    this.reset = this.reset.bind(this);\n    this.lazyMint = this.lazyMint.bind(this);\n  }\n\n  increment = async (fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      increment: {}\n    }, fee, memo, funds);\n  };\n  reset = async ({\n    count\n  }: {\n    count: number;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      reset: {\n        count\n      }\n    }, fee, memo, funds);\n  };\n  lazyMint = async ({\n    messageHash,\n    publicKey,\n    signature\n  }: {\n    messageHash: number[];\n    publicKey: number[];\n    signature: number[];\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      lazy_mint: {\n        message_hash: messageHash,\n        public_key: publicKey,\n        signature\n      }\n    }, fee, memo, funds);\n  };\n}"],"names":["SignatureVerifyQueryClient","client","contractAddress","_this","this","getCount","__awaiter","queryContractSmart","get_count","bind","SignatureVerifyClient","_super","sender","call","increment","fee","memo","funds","execute","_a","reset","count","_b","lazyMint","messageHash","publicKey","signature","lazy_mint","message_hash","public_key","__extends"],"mappings":";;;;;gxDAgDA,IAAAA,EAIE,SAAYC,EAAwBC,GAApC,IAICC,EAAAC,KAEDA,KAAAC,SAAW,WAAA,OAAAC,EAAAH,OAAA,OAAA,GAAA,sCACT,MAAO,CAAA,EAAAC,KAAKH,OAAOM,mBAAmBH,KAAKF,gBAAiB,CAC1DM,UAAW,CAAE,YAPfJ,KAAKH,OAASA,EACdG,KAAKF,gBAAkBA,EACvBE,KAAKC,SAAWD,KAAKC,SAASI,KAAKL,KACpC,EA2BHM,EAAA,SAAAC,GAKE,SAAAD,EAAYT,EAA+BW,EAAgBV,GAA3D,IAAAC,EACEQ,EAAME,KAAAT,KAAAH,EAAQC,IAOfE,YAEDD,EAAAW,UAAY,SAAOC,EAAwCC,EAAeC,eAAvD,IAAAF,IAAAA,EAAsC,iFAChD,KAAA,EAAA,MAAA,CAAA,EAAMX,KAAKH,OAAOiB,QAAQd,KAAKQ,OAAQR,KAAKF,gBAAiB,CAClEY,UAAW,CAAE,GACZC,EAAKC,EAAMC,IAFd,KAAA,EAAA,MAAA,CAAA,EAAOE,kBAIThB,EAAKiB,MAAG,SAAOD,EAIZJ,EAAwCC,EAAeC,GAHxD,IAAAI,EAAKF,EAAAE,kBAGJ,IAAAN,IAAAA,EAAsC,iFAChC,KAAA,EAAA,MAAA,CAAA,EAAMX,KAAKH,OAAOiB,QAAQd,KAAKQ,OAAQR,KAAKF,gBAAiB,CAClEkB,MAAO,CACLC,MAAKA,IAENN,EAAKC,EAAMC,IAJd,KAAA,EAAA,MAAA,CAAA,EAAOK,kBAMTnB,EAAQoB,SAAG,SAAOJ,EAQfJ,EAAwCC,EAAeC,GAPxD,IAAAO,gBACAC,EAASN,EAAAM,UACTC,EAASP,EAAAO,sBAKR,IAAAX,IAAAA,EAAsC,iFAChC,KAAA,EAAA,MAAA,CAAA,EAAMX,KAAKH,OAAOiB,QAAQd,KAAKQ,OAAQR,KAAKF,gBAAiB,CAClEyB,UAAW,CACTC,aAAcJ,EACdK,WAAYJ,EACZC,UAASA,IAEVX,EAAKC,EAAMC,IANd,KAAA,EAAA,MAAA,CAAA,EAAOK,kBAjCPnB,EAAKF,OAASA,EACdE,EAAKS,OAASA,EACdT,EAAKD,gBAAkBA,EACvBC,EAAKW,UAAYX,EAAKW,UAAUL,KAAKN,GACrCA,EAAKiB,MAAQjB,EAAKiB,MAAMX,KAAKN,GAC7BA,EAAKoB,SAAWpB,EAAKoB,SAASd,KAAKN,IACpC,CAmCH,0PAhD2C2B,CAA0BpB,EAAAC,GAgDpED,CAAD,CAhDA,CAA2CV"}