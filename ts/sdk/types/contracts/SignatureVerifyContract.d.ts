/**
* This file was automatically generated by cosmwasm-typescript-gen@0.3.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the cosmwasm-typescript-gen generate command to regenerate this file.
*/
import { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
export declare type ExecuteMsg = {
    increment: {
        [k: string]: unknown;
    };
} | {
    reset: {
        count: number;
        [k: string]: unknown;
    };
} | {
    lazy_mint: {
        message_hash: number[];
        public_key: number[];
        signature: number[];
        [k: string]: unknown;
    };
};
export interface GetCountResponse {
    count: number;
    [k: string]: unknown;
}
export interface InstantiateMsg {
    count: number;
    [k: string]: unknown;
}
export declare type QueryMsg = {
    get_count: {
        [k: string]: unknown;
    };
};
export declare type Addr = string;
export interface State {
    count: number;
    owner: Addr;
    [k: string]: unknown;
}
export interface SignatureVerifyReadOnlyInterface {
    contractAddress: string;
    getCount: () => Promise<GetCountResponse>;
}
export declare class SignatureVerifyQueryClient implements SignatureVerifyReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    getCount: () => Promise<GetCountResponse>;
}
export interface SignatureVerifyInterface extends SignatureVerifyReadOnlyInterface {
    contractAddress: string;
    sender: string;
    increment: (fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    reset: ({ count }: {
        count: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    lazyMint: ({ messageHash, publicKey, signature }: {
        messageHash: number[];
        publicKey: number[];
        signature: number[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
}
export declare class SignatureVerifyClient extends SignatureVerifyQueryClient implements SignatureVerifyInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    increment: (fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    reset: ({ count }: {
        count: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    lazyMint: ({ messageHash, publicKey, signature }: {
        messageHash: number[];
        publicKey: number[];
        signature: number[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
}
//# sourceMappingURL=SignatureVerifyContract.d.ts.map