/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Addr, Config, ExecuteMsg, Uint128, GetRootResponse, GetSubdenomResponse, InstantiateMsg, QueryMsg } from "./MerkleDrop.types";
export interface MerkleDropReadOnlyInterface {
  contractAddress: string;
  getRoot: () => Promise<GetRootResponse>;
  getSubdenom: () => Promise<GetSubdenomResponse>;
}
export class MerkleDropQueryClient implements MerkleDropReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getRoot = this.getRoot.bind(this);
    this.getSubdenom = this.getSubdenom.bind(this);
  }

  getRoot = async (): Promise<GetRootResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_root: {}
    });
  };
  getSubdenom = async (): Promise<GetSubdenomResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_subdenom: {}
    });
  };
}
export interface MerkleDropInterface extends MerkleDropReadOnlyInterface {
  contractAddress: string;
  sender: string;
  setSubDenom: ({
    subdenom
  }: {
    subdenom: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  claim: ({
    amount,
    claimerAddr,
    proof
  }: {
    amount: Uint128;
    claimerAddr: string;
    proof: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class MerkleDropClient extends MerkleDropQueryClient implements MerkleDropInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.setSubDenom = this.setSubDenom.bind(this);
    this.claim = this.claim.bind(this);
  }

  setSubDenom = async ({
    subdenom
  }: {
    subdenom: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_sub_denom: {
        subdenom
      }
    }, fee, memo, funds);
  };
  claim = async ({
    amount,
    claimerAddr,
    proof
  }: {
    amount: Uint128;
    claimerAddr: string;
    proof: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim: {
        amount,
        claimer_addr: claimerAddr,
        proof
      }
    }, fee, memo, funds);
  };
}